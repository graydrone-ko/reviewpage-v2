generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(cuid())
  email              String              @unique
  password           String
  name               String
  role               Role                @default(CONSUMER)
  gender             Gender
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  accountNumber      String
  bankCode           String
  birthDate          String
  phoneNumber        String              @unique
  rewards            Reward[]
  responses          SurveyResponse[]
  surveys            Survey[]
  withdrawalRequests WithdrawalRequest[]

  @@map("users")
}

model SurveyTemplate {
  id          String       @id @default(cuid())
  name        String
  description String?
  isDefault   Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  steps       SurveyStep[]
  surveys     Survey[]

  @@map("survey_templates")
}

model SurveyStep {
  id          String           @id @default(cuid())
  templateId  String
  stepNumber  Int
  title       String
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  questions   SurveyQuestion[]
  template    SurveyTemplate   @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@unique([templateId, stepNumber])
  @@map("survey_steps")
}

model SurveyQuestion {
  id             String           @id @default(cuid())
  stepId         String
  questionNumber Int
  text           String
  type           QuestionType
  required       Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  maxLength      Int?
  minLength      Int?
  placeholder    String?
  options        QuestionOption[]
  step           SurveyStep       @relation(fields: [stepId], references: [id], onDelete: Cascade)

  @@unique([stepId, questionNumber])
  @@map("survey_questions")
}

model QuestionOption {
  id           String         @id @default(cuid())
  questionId   String
  optionNumber Int
  text         String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  question     SurveyQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([questionId, optionNumber])
  @@map("question_options")
}

model Survey {
  id                      String                     @id @default(cuid())
  title                   String
  description             String?
  url                     String
  sellerId                String
  templateId              String
  targetAgeMin            Int
  targetAgeMax            Int
  targetGender            Gender
  reward                  Float
  maxParticipants         Int                        @default(50)
  totalBudget             Float?
  status                  SurveyStatus               @default(PENDING)
  customSteps             Json?
  createdAt               DateTime                   @default(now())
  updatedAt               DateTime                   @updatedAt
  endDate                 DateTime
  approvedAt              DateTime?
  cancellationRequestedAt DateTime?
  cancellationStatus      CancellationStatus?
  completedAt             DateTime?
  extensionCount          Int                        @default(0)
  extensionHistory        Json?
  rejectionReason         String?
  storeName               String                     @default("")
  suspendedAt             DateTime?
  cancellationRequest     SurveyCancellationRequest?
  responses               SurveyResponse[]
  seller                  User                       @relation(fields: [sellerId], references: [id])
  template                SurveyTemplate             @relation(fields: [templateId], references: [id])

  @@map("surveys")
}

model SurveyResponse {
  id         String   @id @default(cuid())
  surveyId   String
  consumerId String
  responses  Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  consumer   User     @relation(fields: [consumerId], references: [id])
  survey     Survey   @relation(fields: [surveyId], references: [id])

  @@unique([surveyId, consumerId])
  @@map("survey_responses")
}

model Reward {
  id        String       @id @default(cuid())
  userId    String
  amount    Float
  type      RewardType
  status    RewardStatus @default(PENDING)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  user      User         @relation(fields: [userId], references: [id])

  @@map("rewards")
}

model SurveyCancellationRequest {
  id           String             @id @default(cuid())
  surveyId     String             @unique
  reason       String
  refundAmount Float
  status       CancellationStatus @default(PENDING)
  requestedAt  DateTime           @default(now())
  processedAt  DateTime?
  processedBy  String?
  survey       Survey             @relation(fields: [surveyId], references: [id], onDelete: Cascade)

  @@map("survey_cancellation_requests")
}

model WithdrawalRequest {
  id          String           @id @default(cuid())
  userId      String
  amount      Float
  status      WithdrawalStatus @default(PENDING)
  requestedAt DateTime         @default(now())
  processedAt DateTime?
  processedBy String?
  note        String?
  user        User             @relation(fields: [userId], references: [id])

  @@map("withdrawal_requests")
}

enum Role {
  SELLER
  CONSUMER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  ALL
}

enum SurveyStatus {
  PENDING
  APPROVED
  COMPLETED
  CANCELLED
  SUSPENDED
}

enum CancellationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum RewardType {
  SURVEY_COMPLETION
  BONUS
  REFUND
}

enum RewardStatus {
  PENDING
  PAID
}

enum QuestionType {
  MULTIPLE_CHOICE
  TEXT
  SCORE
  YES_NO
}

enum WithdrawalStatus {
  PENDING
  APPROVED
  REJECTED
}
